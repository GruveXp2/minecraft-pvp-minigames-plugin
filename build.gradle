plugins {
    id 'java'
}

def incrementBuildNumber() {
    def buildNumberFile = file("build-number.txt")
    def buildNumber = buildNumberFile.text.trim().toInteger() + 1
    buildNumberFile.text = buildNumber.toString()
    return buildNumber
}

def buildNumber = incrementBuildNumber()

group = 'gruvexp'
version = "1.3.1-${buildNumber}"

tasks.register("incrementBuildNumber") {
    doLast {
        incrementBuildNumber()
    }
}

tasks.named("processResources").configure {
    inputs.property("version", version)
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.5-R0.1-SNAPSHOT")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

// This task renames the built jar to exclude the version part
tasks.register('renameJar') {
    println("Kjør kano nå")
    doLast {
        def jarFile = file("build/libs/${project.name}-${version}.jar")
        def renamedFile = file("build/libs/${project.name}.jar")
        println("Version: ${project.version}")
        if (jarFile.exists()) {
            jarFile.renameTo(renamedFile)
        } else {
            println("There wass... error")
        }
    }
}

def renameJar() {
    def jarFile = file("build/libs/${project.name}-${version}.jar")
    def renamedFile = file("build/libs/${project.name}.jar")
    println("Versjon: ${project.version}")

    if (renamedFile.exists()) {
        println("Eksisterans jar funnet, fjerner...")
        renamedFile.delete() // Slett den eksisterende filen
    }

    if (jarFile.exists()) {
        jarFile.renameTo(renamedFile)
    } else {
        println("There wass... error")
    }
}

tasks.named("jar") {
    doLast {
        renameJar()
    }
}
